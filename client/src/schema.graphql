type Query {
  project(fullPath: String!): Project
}

type Project {
  fullPath: String
  webUrl: String
  path: String
  repository: Repository
}

type Repository {
  paginatedTree(path: String!, recursive: Boolean!): TreeConnection
  diskPath: String
}

type TreeConnection {
  nodes: [Tree]
}

type Tree {
  blobs: BlobConnection
  trees: TreeEntryConnection
}

type BlobConnection {
  edges: [BlobEdge]
}

type BlobEdge {
  node: Blob
}

# Implements "Entry" interface
type Blob {
  flatPath: String
  id: String
  name: String
  path: String
  webPath: String
  webUrl: String
}

type TreeEntryConnection {
  nodes: [TreeEntry]
}

# Implements "Entry" interface
type TreeEntry {
  flatPath: String
  id: String
  name: String
  path: String
  webPath: String
  webUrl: String
}
